name: 'Send github'
on:
  push:
    paths:
      - 'components/**'

jobs:
  collect-changed-files:
    name: Capture changed files
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.value }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Get change list
        id: get-changed-files-list
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **.js
            **.jsx
            **.ts
            **.tsx
          # since_last_remote_commit: true

      - name: Build matrix
        id: matrix
        run: |
          echo "value=steps.get-changed-files-list.outputs.all_changed_files" >> $GITHUB_OUTPUT

  report-changes:
    name: Report changes
    needs: [ collect-changed-files ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        value: ${{fromJSON(needs.collect-changed-files.outputs.matrix)}}
    steps:
      - run: |
          echo "${{ matrix.value }}"
      
        
  # output-all:
  #   name: Output commit
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

  #     # Get all changed files
  #     - name: Get changed files
  #       id: get-changed-files
  #       uses: tj-actions/changed-files@v40
  #       # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
  #       with:
  #         files: |
  #           **.js
  #           **.jsx
  #           **.ts
  #           **.tsx
  #         # since_last_remote_commit: true

  #     # # Debug output
  #     # - name: Echo all changed files
  #     #   id: echo-changes
  #     #   run: |
  #     #     for file in ${{ steps.get-changed-files.outputs.all_changed_files }}; do
  #     #       echo "$file was changed"
  #     #     done
          
  #     # # Send updates
  #     # - name: Send each changed file
  #     #   id: send-changes
  #     #   run: |
  #     #     for file in ${{ steps.get-changed-files.outputs.all_changed_files }}; do
  #     #       echo "sending $file"
  #     #       uses: slackapi/slack-github-action@v1.24.0
  #     #       with:
  #     #         payload: |
  #     #           {
  #     #             "user_id": "${{ github.event.pusher.name }}",
  #     #             "user_email": "${{ github.event.pusher.email }}",
  #     #             "misc_data": "$file"
  #     #           }
  #     #       env:
  #     #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #     #     done

  #     - name: Send GitHub Action trigger data to Slack workflow
  #       id: slack
  #       uses: slackapi/slack-github-action@v1.24.0
  #       with:
  #         # This data can be any valid JSON from a previous step in the GitHub Action
  #         payload: |
  #           {
  #             "user_id": "${{ github.event.pusher.name }}",
  #             "user_email": "${{ github.event.pusher.email }}",
  #             "file_name": "${{ steps.get-changed-files.outputs.all_changed_files }}"
  #           }
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
  # update-sync:
  #   name: Update sync state
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Send GitHub Action trigger data to Slack workflow
  #       id: slack
  #       uses: slackapi/slack-github-action@v1.24.0
  #       with:
  #         payload: |
  #           {
  #             "file_name": "components/Components.ts",
  #             "passcode":"${{ secrets.SLACK_GITHUB_WEBHOOK_PASSCODE }}"
  #           }
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_GITHUB_WEBHOOK }}
          
  # setup:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     matrix: ${{ steps.matrix.outputs.value }}
  #   steps:
  #     - id: matrix
  #       run: |
  #         # echo '::set-output name=value::[\"a\", \"b\", \"c\"]'
  #         echo "value=[\"a\", \"b\", \"c\"]" >> $GITHUB_OUTPUT
  # build:
  #   needs: [ setup ]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       value: ${{fromJSON(needs.setup.outputs.matrix)}}
  #   steps:
  #     - run: |
  #         echo "${{ matrix.value }}"
